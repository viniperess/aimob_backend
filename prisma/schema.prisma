generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int           @id @default(autoincrement())
  user             String        @unique
  name             String
  email            String        @unique
  password         String
  cpf              String        @unique
  image            String?
  city             String?
  phone            String?
  creci            String?
  resetCode        String?
  resetCodeExpires DateTime?
  realEstates      RealEstate[]
  appointments     Appointment[]
  tasks            Task[]
  contacts         Contact[]
}

model RealEstate {
  id           Int           @id @default(autoincrement())
  street       String
  number       String
  complement   String?
  district     String
  zipCode      String
  city         String
  state        String
  builtArea    String?
  totalArea    String?
  bedrooms     String?
  bathrooms    String?
  livingRooms  String?
  kitchens     String?
  garage       Boolean      @default(false)
  yard         Boolean       @default(false)
  pool         Boolean       @default(false)
  type         String
  description  String
  salePrice    Float?
  status       Boolean       @default(true)
  registration String        @unique
  images       String[]   
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[]
  tasks        Task[]
  ownerName    String?
  ownerEmail   String?
  ownerPhone   String?
  viewsCount   Int           @default(0) 
  interests    Interest[]
  isPosted     Boolean @default(false)
}

model Appointment {
  id            Int         @id @default(autoincrement())
  visitDate     DateTime
  observation   String?
  visitApproved Boolean     @default(false)
  userId        Int?
  contactId     Int?
  estateId      Int?
  user          User?       @relation(fields: [userId], references: [id])
  contact       Contact?    @relation(fields: [contactId], references: [id])
  realEstate    RealEstate? @relation(fields: [estateId], references: [id])
  tasks         Task[]
}

model Task {
  id            Int            @id @default(autoincrement())
  userId        Int?
  appointmentId Int?
  contactId     Int?
  description   String?
  status        String?
  estateId      Int?
  user          User?          @relation(fields: [userId], references: [id])
  appointment   Appointment?   @relation(fields: [appointmentId], references: [id])
  contact       Contact?       @relation(fields: [contactId], references: [id])
  realEstate    RealEstate?    @relation(fields: [estateId], references: [id])
  notifications Notification[]
}

model Notification {
  id     Int   @id @default(autoincrement())
  taskId Int?
  task   Task? @relation(fields: [taskId], references: [id])
}

model Contact {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phone        String
  createdAt    DateTime      @default(now())
  userId       Int?         
  user         User?          @relation(fields: [userId], references: [id])
  appointments Appointment[]
  tasks        Task[]
  interests    Interest[]
}

model Interest {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  contactId    Int
  realEstateId Int
  contact      Contact     @relation(fields: [contactId], references: [id])
  realEstate   RealEstate  @relation(fields: [realEstateId], references: [id])
}