// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    CLIENT
    EMPLOYEE
}

model User {
    id                   Int           @id @default(autoincrement())
    user                 String        @unique @db.VarChar(255)
    name                 String        @db.VarChar(255)
    email                String        @unique @db.VarChar(255)
    password             String        @db.VarChar(255)
    birthdate            String        @db.VarChar(255)
    cpf                  String        @unique @db.VarChar(255)
    street               String?       @db.VarChar(255)
    number               String?       @db.VarChar(255)
    complement           String?       @db.VarChar(255)
    district             String?       @db.VarChar(255)
    zipCode              String?       @db.VarChar(255)
    city                 String?       @db.VarChar(255)
    phone                String?       @db.VarChar(255)
    creci                String?       @db.VarChar(255)
    isAdmin              Boolean       @default(false)
    roles                Role          @default(CLIENT)
    createdAt            DateTime      @default(now()) @db.Timestamp(6)
    appointmentsEmployee Appointment[] @relation(name: "employeeRelation")
    appointmentsClient   Appointment[] @relation(name: "clientRelation")
    realEstatesEmployee  RealEstate[]  @relation(name: "employeeRelation")
    realEstatesClient    RealEstate[]  @relation(name: "clientRelation")

    contractEmployee Contract[] @relation(name: "employeeRelation")
    contractClient   Contract[] @relation(name: "clientRelation")
}

enum RealEstateType {
    HOUSE
    APARTMENT
}

model RealEstate {
    id           Int            @id @default(autoincrement())
    street       String         @db.VarChar(255)
    number       String         @db.VarChar(255)
    complement   String?        @db.VarChar(255)
    district     String         @db.VarChar(255)
    zipCode      String         @db.VarChar(255)
    city         String         @db.VarChar(255)
    state        String         @db.VarChar(255)
    builtArea    Decimal        @db.Decimal(10, 2)
    totalArea    Decimal        @db.Decimal(10, 2)
    bedrooms     Int            @db.Integer()
    bathrooms    Int            @db.Integer()
    livingRooms  Int            @db.Integer()
    kitchens     Int            @db.Integer()
    garage       Boolean        @default(false)
    type         RealEstateType @default(HOUSE)
    description  String         @db.VarChar(255)
    salePrice    Decimal?       @db.Decimal(10, 2)
    rentPrice    Decimal?       @db.Decimal(10, 2)
    status       Boolean        @default(false)
    registration String         @unique @db.VarChar(255)
    images       String[]
    userId       Int
    employee     User           @relation(fields: [userId], references: [id], onDelete: Cascade, name: "employeeRelation")
    clientUserId Int
    client       User           @relation(fields: [clientUserId], references: [id], name: "clientRelation")
    appointments Appointment[]
    contract     Contract?
}

model Appointment {
    id            Int        @id @default(autoincrement())
    date          DateTime   @default(now())
    observation   String?    @db.VarChar(255)
    visitDate     DateTime?
    visitApproved Boolean?
    userId        Int
    employee      User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "employeeRelation")
    clientUserId  Int
    client        User       @relation(fields: [clientUserId], references: [id], name: "clientRelation")
    estateId      Int
    realEstate    RealEstate @relation(fields: [estateId], references: [id], onDelete: Cascade)
}

model Contract {
    id            Int        @id @default(autoincrement())
    contractType  String     @db.VarChar(255)
    formOfPayment String     @db.VarChar(255)
    date          DateTime   @default(now())
    finalValue    Decimal    @db.Decimal(10, 2)
    commission    Decimal?   @db.Decimal(10, 2)
    userId        Int
    employee      User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "employeeRelation")
    clientUserId  Int
    client        User       @relation(fields: [clientUserId], references: [id], name: "clientRelation")
    estateId      Int        @unique
    realEstate    RealEstate @relation(fields: [estateId], references: [id], onDelete: Cascade)
}
